local mqtt = require("mqtt.init")

local BROKER = "test.mosquitto.org"  -- Address of the Broker
local PORT = 1883 -- Port of the Broker
local CLIENT_ID = "luamqtt-defold-sample-identifier" -- Client identifier, this must be unique

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.4, 0.5, 0.8, 1.0) })

	-- define a topic
	self.topic = "topic/sample"
	
	-- create MQTT client
	self.client = mqtt.client{ uri = BROKER .. ":" .. PORT, id = CLIENT_ID, clean = true, reconnect = 3, version = 5}
	
	-- assign MQTT client event handlers
	self.client:on{
		connect = function(connack)
			if connack.rc ~= 0 then
				print("connection to broker failed:", connack:reason_string(), connack)
				return
			end
			-- connection established, now subscribe to test topic and publish a message after
			assert(self.client:subscribe{ topic=self.topic, qos=1, callback=function()
				assert(self.client:publish{ topic=self.topic, payload = "luamqtt client connected"})
			end})
		end,

		message = function(msg)
			assert(self.client:acknowledge(msg))

			print(string.format('Client received: %s.', msg))
			gui.set_text(gui.get_node("incoming_text"), string.format("Hey, %s just received: %s.", msg.topic, msg.payload))

		end,
	}
	
	-- initialise the ioloop for client
	mqtt.init_ioloop(self.client)
end

function final(self)
	msg.post(".", "release_input_focus")

	-- Unsubscribe, disconnect and destroy on finalizing
	self.client:unsubscribe{ topic=self.topic}
	self.client:disconnect()
end

function update(self, dt)
	
	-- iterate the ioloop
	mqtt.iterate_ioloop()
end

function on_input(self, action_id, action)
	if action.pressed and gui.pick_node(gui.get_node("button"), action.x, action.y) then
		-- Publish to the Broker
		self.client:publish{ topic=self.topic, payload = "Testmessage from Defold"}
	end
end
